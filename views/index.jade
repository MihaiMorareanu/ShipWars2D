extends layout

block head-content


block main-content
	if user && typeof user != "undefined"
		script(type="text/javascript").
			
			window.onload = function(){
				
				var curretUser = document.getElementById('loggedInUser').textContent;
				var gameRoomID = -1;
				
				var allUsersInterval;
				socket.on('error', function(){
					console.log("Error!");
					clearInterval(allUsersInterval);
				});
				
				//Initial get ALL users request - request each 2 sec
				allUsersInterval = setInterval(function request(){
					socket.emit('getAllUsers', {currentUser: curretUser});
					socket.emit('getAllInvites', {currentUser: curretUser});
					return request;
				}(), 5000);
				
				socket.on('allUsersList', allUserReciver);

				socket.on('invitesList', allInvitesReciver);
			
				socket.on('startConfiguration', startConfiguration);

				function listContainsElem(list, elem){
					return list.indexOf(elem) != -1;
				}
				
				function allUserReciver(data){
					var userArr = data.userList;
					var invites = typeof data.invites[curretUser] == "undefined" ? null: data.invites[curretUser];
					//- console.log("<Page - Index> Data: " + userArr);
					var playerContainer = document.getElementsByClassName('player-container')[0];
					var nodeList = playerContainer.childNodes;

					var players = [];
					var playersElem = [];
					for(var idx = 0; idx < nodeList.length; idx++){
						players.push(nodeList[idx].textContent);
						playersElem.push(nodeList[idx]);
					}

					for(var idx = 0; idx < userArr.length; idx++){
						if(listContainsElem(players, userArr[idx])){
							var currNode = playersElem.filter(function(elems){
								return elems.textContent == userArr[idx];
							})[0];

							if(invites && invites.indexOf(userArr[idx]) != -1 ){
								if(!currNode.classList.contains('invite-sent'))
									currNode.classList.add('invite-sent');
							}else{
								if(currNode.classList.contains('invite-sent'))
									currNode.classList.remove('invite-sent');
							}
						} else {
							console.log("List doesn't contains elem!");
							var playerNode = document.createElement('H4');
							var playerNodeText = document.createTextNode(userArr[idx]);
							playerNode.appendChild(playerNodeText);
							playerNode.className += "player";
							playerNode.onclick = handleUserInvite_click;
							playerNode.onmouseout = handleUserInvite_mouseOut;
							playerContainer.appendChild(playerNode);
						}
					}
						
					if(userArr.length < players.length){
						console.log("Deleted elements!");
						var diff = players.filter(function(player){return userArr.indexOf(player) == -1});
						
						for(var idx = 0; idx < nodeList.length; idx++){
							if(diff.indexOf(nodeList[idx].textContent) != -1){
								nodeList[idx].parentNode.removeChild(nodeList[idx]);
							}
						}																
					}
				}
				
				function allInvitesReciver(data){
					var invites = data.invites;
					
					var invitesContainer = document.getElementsByClassName('invites-container')[0];
					var nodeList = invitesContainer.childNodes;

					var onScreenInvites = [];
					for(var idx = 0; idx < nodeList.length; idx++){
						var tempScrInvt = nodeList[idx].textContent;
						if(invites.indexOf(tempScrInvt) == -1)
							//Remove node
							nodeList[idx].parentNode.removeChild(nodeList[idx]);
						else 
							onScreenInvites.push(tempScrInvt);
					}

					invites.forEach(function(invite, idx){
						if(!listContainsElem(onScreenInvites, invite)){
							//- console.log("Adding new invite!");
							var inviteContainerNode = document.createElement('DIV');
							inviteContainerNode.onclick = acceptInvite;
							inviteContainerNode.classList.add('invite');
							
							var xIcon = document.createElement("SPAN");
							var xIconText = document.createTextNode("X");
							xIcon.classList.add("inline");
							xIcon.classList.add("close");
							xIcon.appendChild(xIconText);
							xIcon.onclick= declineInvite;
							inviteContainerNode.appendChild(xIcon);
							
							var inviteNode = document.createElement('H4');
							var inviteNodeText = document.createTextNode(invite);
							inviteNode.classList.add("inline");
							inviteNode.classList.add("senderName");
							inviteNode.appendChild(inviteNodeText);
							inviteContainerNode.appendChild(inviteNode);

							invitesContainer.appendChild(inviteContainerNode);
						}
					});
				}

				function handleUserInvite_mouseOut(event){
					var elem = event.target;
					if(elem.classList.contains("invite-prepared"))
						elem.classList.remove("invite-prepared");
				}						

				function handleUserInvite_click(event){
					var elem = event.target;
					if(elem.classList.contains("invite-prepared")){
						elem.classList.remove("invite-prepared");
						elem.classList.add("invite-sent");

						socket.emit("registerInvite", {from: curretUser, to: elem.textContent});
					}else{	
						elem.classList.add("invite-prepared");
					}
				}

				function declineInvite(event){
					event.stopPropagation();

					var elem = event.target;
					var inviteSender = elem.parentNode.getElementsByClassName('senderName')[0].textContent;
					socket.emit('declineInvite', {from: inviteSender, to: curretUser});
				}

				function acceptInvite(event){

					var elem = event.target;
					var inviteSender = elem.parentNode.getElementsByClassName('senderName')[0].textContent;
					//- console.log("Invite sender id: " + inviteSender);
					socket.emit('createRoom', {from: inviteSender, to: curretUser});
				}

				function startConfiguration(data){
					if(data.users.indexOf(curretUser) != -1){
						console.log("RoomID: " + data.room);
						console.log("Redirecting to game room!");
						
						window.location = "/configBoard?roomID=" + data.room;
					}
				}
			};


		p#loggedInUser(style="display:none")= user.Username
		.menu-part-1
			.player-container
	

			a.quickGame QuickGame
		.menu-part-2
			center
				h3 Invites
			.invites-container
				
	else
		.formContainer
			h3 Not logged in
			a(href="/login") Login &nbsp;
			a(href="/register") Register

	