extends ../layout

block head-content
	script.
		$(document).ready(function(){
			

			$('.innerTable')
			.draggable({helper: 'clone'});

			var modifiedCells = [];

			$('.innerDropSquare').droppable({
				drop: function(){
					console.log("Dropped");
				},
				over: function(event, ui){
					//Put listener on spacebar
					$(document).find('body').unbind();
					$(document).find('body').bind('keyup', function(event){
						handleSpaceBarPress.call(ui.draggable, event.keyCode);
					});

					console.log("Draging");
					var shipSize = parseInt(ui.draggable.prop('id'));
					var isVertical = ui.draggable.hasClass('vertical');
					
					$(this).css("border", "2px solid red");
					modifiedCells.push($(this));
					
					if(shipSize > 1) {
						//- console.log("isEven: " + shipSize % 2);
						var temp = shipSize % 2 == 0 ? (shipSize / 2): Math.round(shipSize / 2) - 1;
						
						//- console.log("Middle point(left): " + temp);
						var tempCurrent$ = $(this);
						while(temp > 0){
							if(isVertical){
								tempCurrent$ = getCellFromPreviousRow(tempCurrent$);
								console.log("Current: " + tempCurrent$.length);
							}else
								tempCurrent$ = tempCurrent$.prev(); 
							if(tempCurrent$.legth == 0 || !isDroppable(tempCurrent$)) break;
							tempCurrent$.css("border", "2px solid red");
							modifiedCells.push(tempCurrent$);
							--temp;
						}
						
						temp = shipSize % 2 == 0 ? (shipSize / 2) : Math.round(shipSize / 2);
						--temp;
						//- console.log("Middle point(right): " + temp);
						tempCurrent$ = $(this);
						while(temp > 0){
							if(isVertical)
								tempCurrent$ = getCellFromNextRow(tempCurrent$);
							else
								tempCurrent$ = tempCurrent$.next();
							if(tempCurrent$.length == 0 || !isDroppable(tempCurrent$)) break;
							tempCurrent$.css("border", "2px solid red");	
							modifiedCells.push(tempCurrent$);
							--temp;
						}							
					}
				},
				out: function(){
					//- $(this).closest('table').find('tr, td').css("border", "1px solid black");
					console.log("Modified cells length : " + modifiedCells.length);
					modifiedCells.forEach((elem) => {
						elem.css("border", "1px solid black");
					});
					modifiedCells = [];
				}
			});
		});

		function handleSpaceBarPress(keyCode){
			console.log("SpaceBar PRESS!");
			if(keyCode == 32){
				$(this).toggleClass("vertical");

				var horizontalMatrix = "matrix(1, 0, 0, 1, 0, 0)";
				var transformVal = $(this).css("transform");
				if(transformVal.indexOf('matrix') != -1){
					if(transformVal == horizontalMatrix){
						console.log("Rotate to vertical!");
						$(this).css("transform", "rotate(90deg)");
					} else {
						console.log("Rotate to horizontal");
						$(this).css("transform", "rotate(0deg)");
					}
				} else {
					$(this).css("transform", "rotate(90deg)");
				}
			}
		}
	
		function getCellFromPreviousRow(currCell){
			return currCell.parent().prev().find('td').eq(currCell.index());
		}

		function getCellFromNextRow(currCell){
			console.log("currCell - down: " + $(currCell).index());
			return $(currCell).parent().next().find('td').eq($(currCell).index());
		}

		function isDroppable(elem){
			return elem.hasClass('innerDropSquare');
		}

block main-content
	#wrapper
		.grid
			table
				- for(var idx1 = 0; idx1 < 11; idx1++) {
				tr
					- for(var idx2 = 0; idx2 < 11; idx2++) {
					if idx1 == 0 && idx2 == 0
						td.outerSquare &nbsp;
					else if idx1 == 0
						td.outerSquare= String.fromCharCode('A'.charCodeAt(0) + (idx2 - 1))
					else if idx2 == 0
						td.outerSquare= idx1
					else 
						td.innerDropSquare &nbsp;
					- }
				- }
		.ships
			center
				h2 Artillery
			table
				tr.shipCategory
					td Warships
						- if(ships && typeof ships.warships.number != "undefined")
							|X#{ships.warships.number}
						- else
							|#[span(style="color:yellow") &nbsp; X2]		
				tr
					td  
						table#5.innerTable 
							tr
								td &nbsp; 
								td &nbsp;
								td &nbsp;
								td &nbsp;
								td &nbsp;
				tr.shipCategory
					td BattleShip
						- if(ships && typeof ships.battleship.number != "undefined")
							|X#{ships.battleship.number}
						- else
							|#[span(style="color:yellow") &nbsp; X1]		
				tr
					td
						table#4.innerTable
							tr
								td &nbsp; 
								td &nbsp;
								td &nbsp;
								td &nbsp;
				tr.shipCategory
					td Cruiser
						- if(ships && typeof ships.cruiser.number != "undefined")
							|X#{ships.cruiser.number}
						- else
							|#[span(style="color:yellow") &nbsp; X1]						
				tr
					td 
						table#3.innerTable
							tr
								td &nbsp; 
								td &nbsp;
								td &nbsp;
				tr.shipCategory
					td Destroyer
						- if(ships && typeof ships.destroyer.number != "undefined")
							|X#{ships.destroyer.number}
						- else
							|#[span(style="color:yellow") &nbsp; X2]		
				tr
					td 
						table#2.innerTable 
							tr
								td &nbsp; 
								td &nbsp;
				tr.shipCategory
					td Submarine 
						- if(ships && typeof ships.submarine.number != "undefined")
							|X#{ships.submarine.number}
						- else
							|#[span(style="color:yellow") &nbsp; X2]		
				tr
					td 
						table#1.innerTable 
							tr
								td &nbsp; 

